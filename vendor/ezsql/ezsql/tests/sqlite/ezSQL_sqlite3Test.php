<?php

require 'vendor/autoload.php';
use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-03-08 at 02:54:12.
 */
class ezSQL_sqlite3Test extends TestCase
{
    /**
     * constant string path and file name of the SQLite test database
     */
    const TEST_SQLITE_DB = 'ez_test.sqlite3';
    const TEST_SQLITE_DB_DIR = './tests/sqlite/';
    
    /**
     * @var ezSQL_sqlite3
     */
    protected $object;
    private $errors;
 
    function errorHandler($errno, $errstr, $errfile, $errline, $errcontext) {
        $this->errors[] = compact("errno", "errstr", "errfile",
            "errline", "errcontext");
    }

    function assertError($errstr, $errno) {
        foreach ($this->errors as $error) {
            if ($error["errstr"] === $errstr
                && $error["errno"] === $errno) {
                return;
            }
        }
        $this->fail("Error with level " . $errno .
            " and message '" . $errstr . "' not found in ", 
            var_export($this->errors, TRUE));
    }   

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        if (!extension_loaded('sqlite3')) {
            $this->markTestSkipped(
              'The sqlite3 Lib is not available.'
            );
        }
        $this->object = new ezSQL_sqlite3(self::TEST_SQLITE_DB_DIR, self::TEST_SQLITE_DB); 
        $this->object->setPrepare();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object->query("DROP TABLE test_table;");
        $this->object = null;
    }

    /**
     * @covers ezSQL_sqlite3::connect
     */
    public function testConnect() { 
        //$this->errors = array();
        //set_error_handler(array($this, 'errorHandler'));        
        $this->assertFalse($this->object->connect());
        
        $this->assertFalse($this->object->connect('null:', ''));
        
        $this->assertTrue($this->object->connect(self::TEST_SQLITE_DB_DIR, self::TEST_SQLITE_DB));
    } // testSQLiteConnect

    /**
     * @covers ezSQL_sqlite3::quick_connect
     */
    public function testQuick_connect() {
        $this->assertNotNull($this->object->quick_connect(self::TEST_SQLITE_DB_DIR, self::TEST_SQLITE_DB));
    } // testSQLiteQuick_connect
    
    /**
     * @covers ezSQL_sqlite3::escape
     */
    public function testSQLite3Escape() {

        $result = $this->object->escape("This is'nt escaped.");
        $this->assertEquals("This is''nt escaped.", $result);         
    } // testSQLiteEscape
    
    /**
     * @covers ezSQL_sqlite3::sysdate
     */
    public function testSysdate() {
        $this->assertEquals('now', $this->object->sysdate());
    }

    /**
     * @covers ezSQL_sqlite3::query
     */
    public function testQuery()
    {
        // Create a table..
        $this->object->query("DROP TABLE test_table;");
        $this->assertEquals(0,$this->object->query("CREATE TABLE test_table ( MyColumnA INTEGER PRIMARY KEY, MyColumnB TEXT(32) );"));

        // Insert test data
        for($i=0;$i<3;++$i)
        {
            $this->assertNotNull($this->object->query('INSERT INTO test_table (MyColumnB) VALUES ("'.md5(microtime()).'");'));
        }
	
        // Get list of tables from current database..
        $my_tables = $this->object->get_results("SELECT * FROM sqlite_master WHERE sql NOTNULL;");
        
        // Loop through each row of results..
        foreach ( $my_tables as $table )
        {
            // Get results of DESC table..
            $this->assertNotNull($this->object->get_results("SELECT * FROM $table->name;"));
        }

        // Get rid of the table we created..
        $this->object->query("DROP TABLE test_table;");
    }   
    /**
     * @covers ezQuery::insert
     */
    public function testInsert()
    {
        $this->object->query('CREATE TABLE test_table(id integer, test_key varchar(50), PRIMARY KEY (ID))');

        $result = $this->object->insert('test_table', array('test_key'=>'test 1' ));
        $this->assertEquals(0, $result);
    }
       
    /**
     * @covers ezQuery::update
     */
    public function testUpdate()
    {
        $this->object->query('CREATE TABLE test_table(id integer, test_key varchar(50), test_value varchar(50), PRIMARY KEY (ID))');
        $this->object->insert('test_table', array('test_key'=>'test 1', 'test_value'=>'testing string 1' ));
        $this->object->insert('test_table', array('test_key'=>'test 2', 'test_value'=>'testing string 2' ));
        $result = $this->object->insert('test_table', array('test_key'=>'test 3', 'test_value'=>'testing string 3' ));
        $this->assertEquals($result, 3);
        $test_table['test_key'] = 'the key string';
        $where="test_key  =  test 1";
        $this->assertEquals(1, $this->object->update('test_table', $test_table, $where));
        $this->assertEquals(1, $this->object->update('test_table', $test_table, eq('test_key','test 3', _AND),
                                                                            eq('test_value','testing string 3')));
        $where=eq('test_value','testing string 4');
        $this->assertEquals(0, $this->object->update('test_table', $test_table, $where));
        $this->assertEquals(1, $this->object->update('test_table', $test_table, "test_key  =  test 2"));
    }
    
    /**
     * @covers ezQuery::delete
     */
    public function testDelete()
    {
        $this->object->query('CREATE TABLE test_table(id integer, test_key varchar(50), test_value varchar(50), PRIMARY KEY (ID))');
        $this->object->insert('test_table', array('test_key'=>'test 1', 'test_value'=>'testing string 1' ));
        $this->object->insert('test_table', array('test_key'=>'test 2', 'test_value'=>'testing string 2' ));
        $this->object->insert('test_table', array('test_key'=>'test 3', 'test_value'=>'testing string 3' ));   

        $where=array('test_key','=','test 1');
        $this->assertEquals($this->object->delete('test_table', $where), 1);
        
        $this->assertEquals($this->object->delete('test_table', 
            array('test_key','=','test 3'),
            array('test_value','=','testing string 3')), 1);
        $where=array('test_value','=','testing 2');
        $this->assertEquals(0, $this->object->delete('test_table', $where));
        $where="test_key  =  test 2";
        $this->assertEquals(1, $this->object->delete('test_table', $where));
    }  

    /**
     * @covers ezQuery::selecting
     */
    public function testSelecting()
    {
        $this->object->query('CREATE TABLE test_table(id integer, test_key varchar(50), test_value varchar(50), PRIMARY KEY (ID))');
        $this->object->insert('test_table', array('test_key'=>'test 1', 'test_value'=>'testing string 1' ));
        $this->object->insert('test_table', array('test_key'=>'test 2', 'test_value'=>'testing string 2' ));
        $this->object->insert('test_table', array('test_key'=>'test 3', 'test_value'=>'testing string 3' ));   
        
        $result = $this->object->selecting('test_table');        
        $i = 1;
        foreach ($result as $row) {
            $this->assertEquals($i, $row->id);
            $this->assertEquals('testing string ' . $i, $row->test_value);
            $this->assertEquals('test ' . $i, $row->test_key);
            ++$i;
        }
        
        $where = eq('id',2);
        $result = $this->object->selecting('test_table', 'id', $this->object->where($where));
        foreach ($result as $row) {
            $this->assertEquals(2, $row->id);
        }
        
        $where = [ eq('test_value','testing string 3') ];
        $result = $this->object->selecting('test_table', 'test_key', $this->object->where($where));
        foreach ($result as $row) {
            $this->assertEquals('test 3', $row->test_key);
        }      
        
        $result = $this->object->selecting('test_table', 'test_value', $this->object->where(eq( 'test_key','test 1' )));
        foreach ($result as $row) {
            $this->assertEquals('testing string 1', $row->test_value);
        }
    } 
    
    /**
     * @covers ezSQL_sqlite3::__construct
     */
    public function test__Construct() {   
        $this->errors = array();
        set_error_handler(array($this, 'errorHandler'));    
        
        $sqlite3 = $this->getMockBuilder(ezSQL_sqlite3::class)
        ->setMethods(null)
        ->disableOriginalConstructor()
        ->getMock();
        
        $this->assertNull($sqlite3->__construct());  
    } 
    
}
